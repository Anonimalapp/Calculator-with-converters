import 'package:flutter/material.dart';

void main() {
  runApp(CalculatorWithConverters());
}

class CalculatorWithConverters extends StatefulWidget {
  @override
  _CalculatorWithConvertersState createState() =>
      _CalculatorWithConvertersState();
}

class _CalculatorWithConvertersState extends State<CalculatorWithConverters> {
  final PageController _pageController = PageController(initialPage: 0);

  int _selectedPage = 0;

  void navigateToPage(int pageIndex) {
    setState(() {
      _selectedPage = pageIndex;
      _pageController.jumpToPage(pageIndex);
    });
    Navigator.pop(context); // Close the drawer after navigation
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      theme: ThemeData.dark(),
      home: Scaffold(
        appBar: AppBar(
          title: Text(
            _selectedPage == 0 ? 'Calculator' : 'Converters',
            style: TextStyle(color: Colors.white),
          ),
          backgroundColor: Colors.grey[900],
          centerTitle: true,
        ),
        drawer: Drawer(
          child: ListView(
            padding: EdgeInsets.zero,
            children: [
              DrawerHeader(
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    colors: [Colors.blue, Colors.lightBlueAccent],
                  ),
                ),
                child: Text(
                  'Menu',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 24,
                  ),
                ),
              ),
              ListTile(
                leading: Icon(Icons.calculate, color: Colors.blue),
                title: Text('Calculator'),
                onTap: () => navigateToPage(0),
              ),
              ListTile(
                leading: Icon(Icons.swap_horiz, color: Colors.blue),
                title: Text('Converters'),
                onTap: () => navigateToPage(1),
              ),
            ],
          ),
        ),
        body: PageView(
          controller: _pageController,
          physics: NeverScrollableScrollPhysics(),
          children: [
            CalculatorScreen(),
            ConvertersScreen(),
          ],
        ),
      ),
    );
  }
}

// Calculator Screen
class CalculatorScreen extends StatefulWidget {
  @override
  _CalculatorScreenState createState() => _CalculatorScreenState();
}

class _CalculatorScreenState extends State<CalculatorScreen> {
  String input = '';
  String output = '0';
  String operation = '';
  double num1 = 0;
  double num2 = 0;

  List<String> history = []; // To store calculation history

  void buttonPressed(String value) {
    setState(() {
      if (value == 'AC') {
        input = '';
        output = '0';
        num1 = 0;
        num2 = 0;
        operation = '';
        history.clear(); // Clear history when AC is pressed
      } else if (value == 'C') {
        if (input.isNotEmpty) {
          input = input.substring(0, input.length - 1);
          output = input.isNotEmpty ? input : '0';
        }
      } else if ('+-*/'.contains(value)) {
        if (input.isNotEmpty) {
          num1 = double.tryParse(input) ?? 0;
        }
        operation = value;
        input = '';
      } else if (value == '=') {
        if (operation.isNotEmpty && input.isNotEmpty) {
          num2 = double.tryParse(input) ?? 0;
          double result = 0;
          switch (operation) {
            case '+':
              result = num1 + num2;
              break;
            case '-':
              result = num1 - num2;
              break;
            case '*':
              result = num1 * num2;
              break;
            case '/':
              result = num2 != 0 ? num1 / num2 : double.infinity;
              break;
          }
          // Add the current calculation to the history
          history.add('$num1 $operation $num2 = $result');
          output = result.toString();
          // Reset for the next calculation
          num1 = result;
          input = '';
          operation = '';
        }
      } else {
        input += value;
        output = input;
      }
    });
  }

  Widget buildButton(String text,
      {Color bgColor = Colors.blueAccent, double fontSize = 24}) {
    return Expanded(
      child: GestureDetector(
        onTap: () => buttonPressed(text),
        child: Container(
          height: 80,
          margin: EdgeInsets.all(8),
          decoration: BoxDecoration(
            color: bgColor,
            shape: BoxShape.circle,
          ),
          child: Center(
            child: Text(
              text,
              style: TextStyle(
                fontSize: fontSize,
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget buildDisplay() {
    return Container(
      margin: EdgeInsets.all(16),
      padding: EdgeInsets.symmetric(horizontal: 16, vertical: 24),
      decoration: BoxDecoration(
        color: Colors.grey[900],
        borderRadius: BorderRadius.circular(20),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.end,
        children: [
          Text(
            input + (operation.isNotEmpty ? ' $operation' : ''),
            style: TextStyle(
              fontSize: 28,
              color: Colors.grey[400],
            ),
          ),
          SizedBox(height: 10),
          Text(
            output,
            style: TextStyle(
              fontSize: 48,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
        ],
      ),
    );
  }

  Widget buildHistory() {
    return Expanded(
      child: Container(
        margin: EdgeInsets.all(16),
        padding: EdgeInsets.all(8),
        decoration: BoxDecoration(
          color: Colors.grey[900],
          borderRadius: BorderRadius.circular(12),
        ),
        child: ListView.builder(
          itemCount: history.length,
          itemBuilder: (context, index) {
            return Text(
              history[index],
              style: TextStyle(color: Colors.white, fontSize: 16),
              textAlign: TextAlign.right,
            );
          },
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[850],
      body: Column(
        children: [
          buildHistory(),
          buildDisplay(),
          Expanded(
            flex: 5,
            child: Column(
              children: [
                Row(
                  children: [
                    buildButton('AC', bgColor: Colors.redAccent),
                    buildButton('C', bgColor: Colors.orange),
                    buildButton('%', bgColor: Colors.blue),
                    buildButton('/', bgColor: Colors.green),
                  ],
                ),
                Row(
                  children: [
                    buildButton('7'),
                    buildButton('8'),
                    buildButton('9'),
                    buildButton('*', bgColor: Colors.green),
                  ],
                ),
                Row(
                  children: [
                    buildButton('4'),
                    buildButton('5'),
                    buildButton('6'),
                    buildButton('-', bgColor: Colors.green),
                  ],
                ),
                Row(
                  children: [
                    buildButton('1'),
                    buildButton('2'),
                    buildButton('3'),
                    buildButton('+', bgColor: Colors.green),
                  ],
                ),
                Row(
                  children: [
                    buildButton('0'),
                    buildButton('.'),
                    buildButton('=', bgColor: Colors.green),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

// Converters Screen
class ConvertersScreen extends StatefulWidget {
  @override
  _ConvertersScreenState createState() => _ConvertersScreenState();
}

class _ConvertersScreenState extends State<ConvertersScreen> {
  final List<String> converterCategories = [
    'Volume',
    'Length',
    'Weight & Mass',
    'Temperature',
    'Area',
  ];

  String selectedCategory = 'Volume';
  double input = 0;
  String fromUnit = 'Liters';
  String toUnit = 'Milliliters';
  double convertedValue = 0;

  final Map<String, List<String>> unitOptions = {
    'Volume': ['Liters', 'Milliliters', 'Cubic Meters'],
    'Length': ['Meters', 'Kilometers', 'Feet', 'Miles'],
    'Weight & Mass': ['Kilograms', 'Grams', 'Pounds'],
    'Temperature': ['Celsius', 'Fahrenheit', 'Kelvin'],
    'Area': ['Square Meters', 'Hectares', 'Acres'],
  };

  final Map<String, Function> conversionLogic = {
    'Volume': (double value, String from, String to) {
      Map<String, double> conversions = {
        'Liters': 1,
        'Milliliters': 0.001,
        'Cubic Meters': 1000,
      };
      return value * conversions[from]! / conversions[to]!;
    },
    'Length': (double value, String from, String to) {
      Map<String, double> conversions = {
        'Meters': 1,
        'Kilometers': 0.001,
        'Feet': 3.28084,
        'Miles': 0.000621371,
      };
      return value * conversions[from]! / conversions[to]!;
    },
    'Weight & Mass': (double value, String from, String to) {
      Map<String, double> conversions = {
        'Kilograms': 1,
        'Grams': 0.001,
        'Pounds': 2.20462,
      };
      return value * conversions[from]! / conversions[to]!;
    },
    'Temperature': (double value, String from, String to) {
      if (from == to) return value;
      if (from == 'Celsius' && to == 'Fahrenheit') return value * 9 / 5 + 32;
      if (from == 'Fahrenheit' && to == 'Celsius') return (value - 32) * 5 / 9;
      if (from == 'Celsius' && to == 'Kelvin') return value + 273.15;
      if (from == 'Kelvin' && to == 'Celsius') return value - 273.15;
      if (from == 'Fahrenheit' && to == 'Kelvin')
        return (value - 32) * 5 / 9 + 273.15;
      if (from == 'Kelvin' && to == 'Fahrenheit')
        return (value - 273.15) * 9 / 5 + 32;
      return value;
    },
    'Area': (double value, String from, String to) {
      Map<String, double> conversions = {
        'Square Meters': 1,
        'Hectares': 0.0001,
        'Acres': 0.000247105,
      };
      return value * conversions[from]! / conversions[to]!;
    },
  };

  void convert() {
    setState(() {
      convertedValue = conversionLogic[selectedCategory]!(
        input,
        fromUnit,
        toUnit,
      ).roundToDouble(); // Rounds the result to the nearest whole number
      input = convertedValue; // Update input field with the rounded value
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[850],
      body: Center(
        child: SingleChildScrollView(
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                Text(
                  'Select Category',
                  style: TextStyle(fontSize: 20, color: Colors.white),
                  textAlign: TextAlign.center,
                ),
                SizedBox(height: 10),
                DropdownButton<String>(
                  dropdownColor: Colors.grey[800],
                  value: selectedCategory,
                  items: converterCategories.map((String category) {
                    return DropdownMenuItem<String>(
                      value: category,
                      child: Text(
                        category,
                        style: TextStyle(color: Colors.white),
                      ),
                    );
                  }).toList(),
                  onChanged: (value) {
                    setState(() {
                      selectedCategory = value!;
                      fromUnit = unitOptions[selectedCategory]![0];
                      toUnit = unitOptions[selectedCategory]![1];
                      input = 0;
                      convertedValue = 0;
                    });
                  },
                ),
                SizedBox(height: 20),
                TextField(
                  style: TextStyle(color: Colors.white),
                  keyboardType: TextInputType.number,
                  decoration: InputDecoration(
                    labelText: 'Enter Value',
                    labelStyle: TextStyle(color: Colors.grey[400]),
                    filled: true,
                    fillColor: Colors.grey[800],
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  onChanged: (value) {
                    input = double.tryParse(value) ?? 0;
                  },
                  controller: TextEditingController(
                    text: convertedValue != 0
                        ? convertedValue.toInt().toString()
                        : input.toInt().toString(),
                  ),
                ),
                SizedBox(height: 20),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    DropdownButton<String>(
                      dropdownColor: Colors.grey[800],
                      value: fromUnit,
                      items: unitOptions[selectedCategory]!.map((String unit) {
                        return DropdownMenuItem<String>(
                          value: unit,
                          child: Text(
                            unit,
                            style: TextStyle(color: Colors.white),
                          ),
                        );
                      }).toList(),
                      onChanged: (value) {
                        setState(() {
                          fromUnit = value!;
                        });
                      },
                    ),
                    SizedBox(width: 10),
                    Icon(Icons.arrow_forward, color: Colors.white),
                    SizedBox(width: 10),
                    DropdownButton<String>(
                      dropdownColor: Colors.grey[800],
                      value: toUnit,
                      items: unitOptions[selectedCategory]!.map((String unit) {
                        return DropdownMenuItem<String>(
                          value: unit,
                          child: Text(
                            unit,
                            style: TextStyle(color: Colors.white),
                          ),
                        );
                      }).toList(),
                      onChanged: (value) {
                        setState(() {
                          toUnit = value!;
                        });
                      },
                    ),
                  ],
                ),
                SizedBox(height: 20),
                ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    padding: EdgeInsets.symmetric(vertical: 16),
                    backgroundColor: Colors.blueAccent,
                  ),
                  onPressed: convert,
                  child: Text(
                    'Convert',
                    style: TextStyle(fontSize: 18),
                  ),
                ),
                SizedBox(height: 20),
                Text(
                  'Converted Value: ${convertedValue.toInt()}',
                  style: TextStyle(fontSize: 24, color: Colors.white),
                  textAlign: TextAlign.center,
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
